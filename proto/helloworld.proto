syntax = "proto3"; //表明使用protobuf的编译器的版本为v3


package helloworld; //声明了一个包名，用来防止不同的消息类型命名冲突，类似于 namespace

// The greeting service definition.
service Greeter {
    // Sends a greeting
    //
    rpc SayHello (HelloRequest) returns (HelloReply) {}
    //服务器端流式 RPC
    //
    //客户端发送请求到服务器，拿到一个流去读取返回的消息序列。客户端读取返回的流，直到里面没有任何消息。从例子中可以看出，通过在响应类型前插入 stream 关键字，可以指定一个服务器端的流方法
    rpc SayHello2 (HelloRequest) returns (stream HelloReply) {}
}

// The request message containing the user's name.
//protobuf一共有三个字段修饰符：
//  　　- required：该值是必须要设置的；
//  　　- optional ：该字段可以有0个或1个值（不超过1个）；
//  　　- repeated：该字段可以重复任意多次（包括0次），类似于C++中的list；
//  使用建议：除非确定某个字段一定会被设值，否则使用optional代替required。
message HelloRequest { //是Protobuf中的结构化数据，类似于C++中的类，可以在其中定义需要处理的数据
    string name = 1; //声明了一个名为name，数据类型为string的required字段，字段的标识号为1
}

// The response message containing the greetings
message HelloReply {
    string message = 1;
}